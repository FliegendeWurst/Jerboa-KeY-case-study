/* The following code was generated by JFlex 1.6.1 */

package fr.up.xlim.sic.ig.jerboa.jme.script.language.generated;
import java_cup.runtime.Symbol; 

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;

import fr.up.xlim.sic.ig.jerboa.jme.script.language.tree.syntax.tools.JSOperatorKind;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>language/language.jflex</tt>
 */
public class MyLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int LANGCODE = 4;
  public static final int LANGHEADER = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\117\1\17\1\21\1\22\1\20\22\0\1\117\1\40\1\61"+
    "\1\105\1\46\1\27\1\32\1\115\1\71\1\72\1\23\1\26\1\102"+
    "\1\5\1\101\1\16\12\1\1\100\1\77\1\35\1\36\1\37\1\24"+
    "\1\45\1\57\1\62\1\2\1\67\1\4\1\56\1\107\1\66\1\64"+
    "\1\104\1\63\1\43\1\114\1\41\1\70\1\111\1\2\1\55\1\60"+
    "\1\54\1\42\1\103\1\65\3\2\1\75\1\116\1\76\1\25\1\3"+
    "\1\0\1\13\1\106\1\51\1\31\1\11\1\12\1\112\1\52\1\53"+
    "\1\104\1\113\1\14\1\110\1\30\1\33\1\44\1\2\1\7\1\15"+
    "\1\6\1\10\1\103\1\47\1\2\1\50\1\2\1\73\1\34\1\74"+
    "\7\0\1\21\u1fa2\0\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\3\1\5\5\3"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\2\3"+
    "\1\14\1\3\1\15\1\16\1\17\1\20\1\21\1\3"+
    "\1\22\1\23\5\3\1\24\3\3\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\3"+
    "\1\37\1\1\2\40\1\41\1\42\1\40\1\43\1\44"+
    "\1\45\1\46\1\0\1\47\1\0\1\3\1\50\12\3"+
    "\1\1\1\0\1\51\4\3\1\52\1\53\2\54\1\55"+
    "\1\56\1\57\1\60\1\61\16\0\3\3\1\62\1\63"+
    "\1\3\1\64\2\3\1\0\1\65\1\66\1\67\1\70"+
    "\1\71\1\0\1\71\2\3\1\72\3\3\2\73\1\3"+
    "\1\53\1\3\1\0\1\3\1\74\1\21\1\3\7\0"+
    "\1\75\7\0\6\3\1\76\1\0\1\77\1\100\5\3"+
    "\1\101\1\102\1\3\3\0\1\103\13\0\4\3\1\104"+
    "\1\3\1\0\1\105\1\3\1\106\4\3\3\0\1\107"+
    "\6\0\1\110\1\111\1\0\1\112\1\113\1\3\1\114"+
    "\1\3\1\0\1\115\3\3\1\116\4\0\1\117\5\0"+
    "\2\3\2\0\1\120\1\121\1\102\1\0\1\122\3\0"+
    "\1\123\3\0\2\3\3\0\1\124\2\0\1\125\1\126"+
    "\1\3\4\0\1\127\1\3\2\0\1\130\1\0\1\131"+
    "\4\0\1\132\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0140"+
    "\0\u0230\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460"+
    "\0\u04b0\0\u0140\0\u0140\0\u0140\0\u0500\0\u0140\0\u0550\0\u05a0"+
    "\0\u05f0\0\u0640\0\u0690\0\u06e0\0\u0730\0\u0780\0\u07d0\0\u0820"+
    "\0\u0870\0\u0140\0\u08c0\0\u0910\0\u0960\0\u09b0\0\u0a00\0\u0140"+
    "\0\u0a50\0\u0aa0\0\u0af0\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140"+
    "\0\u0140\0\u0140\0\u0b40\0\u0140\0\u0140\0\u0b90\0\u0be0\0\u0140"+
    "\0\u0c30\0\u0c80\0\u0cd0\0\u0140\0\u0d20\0\u0d70\0\u0140\0\u0140"+
    "\0\u0dc0\0\u0140\0\u0e10\0\u0140\0\u0e60\0\u0eb0\0\u0140\0\u0f00"+
    "\0\u0f50\0\u0fa0\0\u0ff0\0\u1040\0\u1090\0\u10e0\0\u1130\0\u1180"+
    "\0\u11d0\0\u1220\0\u1270\0\u0140\0\u12c0\0\u1310\0\u1360\0\u13b0"+
    "\0\u01e0\0\u0140\0\u01e0\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140"+
    "\0\u0140\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u1540\0\u1590\0\u15e0"+
    "\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770\0\u17c0\0\u1810\0\u1860"+
    "\0\u18b0\0\u1900\0\u01e0\0\u01e0\0\u1950\0\u0140\0\u19a0\0\u19f0"+
    "\0\u1a40\0\u0140\0\u0140\0\u0140\0\u0140\0\u1a90\0\u1ae0\0\u1b30"+
    "\0\u1b80\0\u1bd0\0\u01e0\0\u1c20\0\u1c70\0\u1cc0\0\u1d10\0\u01e0"+
    "\0\u1d60\0\u01e0\0\u1db0\0\u1e00\0\u1e50\0\u01e0\0\u01e0\0\u1ea0"+
    "\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u0140"+
    "\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300\0\u2350"+
    "\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0\0\u0140\0\u2530\0\u01e0"+
    "\0\u01e0\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u01e0\0\u2710"+
    "\0\u2760\0\u27b0\0\u2800\0\u2850\0\u0140\0\u28a0\0\u28f0\0\u2940"+
    "\0\u2990\0\u29e0\0\u2a30\0\u2a80\0\u2ad0\0\u2b20\0\u2b70\0\u2bc0"+
    "\0\u2c10\0\u2c60\0\u2cb0\0\u2d00\0\u01e0\0\u2d50\0\u2da0\0\u01e0"+
    "\0\u2df0\0\u01e0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0"+
    "\0\u3020\0\u0140\0\u3070\0\u30c0\0\u3110\0\u3160\0\u31b0\0\u3200"+
    "\0\u0140\0\u0140\0\u3250\0\u01e0\0\u01e0\0\u32a0\0\u01e0\0\u32f0"+
    "\0\u3340\0\u01e0\0\u3390\0\u33e0\0\u3430\0\u01e0\0\u3480\0\u34d0"+
    "\0\u3520\0\u3570\0\u0140\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u3700"+
    "\0\u3750\0\u37a0\0\u37f0\0\u3840\0\u01e0\0\u01e0\0\u01e0\0\u3890"+
    "\0\u0140\0\u38e0\0\u3930\0\u3980\0\u0140\0\u39d0\0\u3a20\0\u3a70"+
    "\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u0140\0\u3c50\0\u3ca0"+
    "\0\u0140\0\u01e0\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u0140"+
    "\0\u3e80\0\u3ed0\0\u3f20\0\u0140\0\u3f70\0\u01e0\0\u3fc0\0\u4010"+
    "\0\u4060\0\u40b0\0\u0140\0\u0140\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\7\1\11\1\15\1\16\1\7\1\17\1\20\1\5"+
    "\1\21\1\5\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\3\7\1\41\1\42\1\43\1\7\1\44"+
    "\1\7\1\45\1\46\1\7\1\47\2\7\1\50\1\51"+
    "\1\7\1\52\1\43\1\7\1\53\1\7\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\51\6\7\1\71\1\5\1\21"+
    "\17\72\1\5\1\21\1\72\1\73\36\72\1\74\34\72"+
    "\1\75\1\73\73\76\1\77\1\100\23\76\2\5\1\101"+
    "\1\5\1\101\1\5\10\101\2\5\1\21\1\5\1\21"+
    "\3\5\1\101\1\5\2\101\1\5\1\101\5\5\4\101"+
    "\2\5\12\101\1\5\7\101\1\54\1\55\1\102\7\5"+
    "\12\101\2\5\1\21\121\0\1\6\2\0\1\103\4\0"+
    "\1\103\1\104\66\0\1\105\17\0\4\7\1\0\10\7"+
    "\12\0\2\7\1\0\1\7\5\0\4\7\2\0\12\7"+
    "\1\0\7\7\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\6\7\1\106\1\7\12\0\2\7\1\0\1\7"+
    "\5\0\2\7\1\106\1\7\2\0\12\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\10\0\1\107\113\0\4\7"+
    "\1\0\1\7\1\110\6\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\3\7\1\111\2\7\1\112\3\7"+
    "\1\0\7\7\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\3\7\1\113\4\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\12\7\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\5\7\1\114\2\7"+
    "\12\0\2\7\1\0\1\115\5\0\4\7\2\0\4\7"+
    "\1\116\3\7\1\114\1\7\1\0\6\7\1\117\12\0"+
    "\2\7\1\0\7\7\4\0\4\7\1\0\10\7\12\0"+
    "\1\120\1\7\1\0\1\7\5\0\4\7\2\0\12\7"+
    "\1\0\7\7\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\1\121\7\7\12\0\2\7\1\0\1\7\5\0"+
    "\4\7\2\0\12\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\21\0\1\122\4\0\1\123\114\0\1\21\1\0"+
    "\1\21\74\0\1\21\26\0\1\124\72\0\4\7\1\0"+
    "\2\7\1\125\1\126\4\7\12\0\2\7\1\0\1\127"+
    "\5\0\1\7\1\125\2\7\2\0\12\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\4\0\4\7\1\0\3\7"+
    "\1\130\4\7\12\0\2\7\1\0\1\131\5\0\4\7"+
    "\2\0\12\7\1\0\6\7\1\131\12\0\2\7\1\0"+
    "\7\7\35\0\1\132\66\0\4\7\1\0\1\7\1\133"+
    "\6\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\12\7\1\0\7\7\12\0\2\7\1\0\7\7\37\0"+
    "\1\134\121\0\1\135\117\0\1\136\1\137\116\0\1\140"+
    "\117\0\1\141\62\0\4\7\1\0\2\7\1\125\5\7"+
    "\12\0\2\7\1\0\1\7\5\0\1\7\1\125\2\7"+
    "\2\0\12\7\1\0\7\7\12\0\2\7\1\0\7\7"+
    "\12\0\1\142\1\143\1\144\2\0\1\145\14\0\1\146"+
    "\1\0\1\147\7\0\1\150\1\151\4\0\1\152\1\153"+
    "\1\154\1\0\1\155\31\0\1\156\1\157\1\0\1\156"+
    "\6\0\4\7\1\0\10\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\3\7\1\160\6\7\1\0\4\7"+
    "\1\160\2\7\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\5\7\1\161\2\7\12\0\2\7\1\0\1\162"+
    "\5\0\4\7\2\0\12\7\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\4\7\1\163\3\7"+
    "\12\0\1\164\1\7\1\0\1\7\5\0\4\7\2\0"+
    "\7\7\1\163\2\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\1\7\1\112\6\7\12\0"+
    "\2\7\1\0\1\7\5\0\4\7\2\0\6\7\1\112"+
    "\3\7\1\0\7\7\12\0\2\7\1\0\7\7\4\0"+
    "\4\7\1\0\5\7\1\114\2\7\12\0\2\7\1\0"+
    "\1\117\5\0\4\7\2\0\10\7\1\114\1\7\1\0"+
    "\6\7\1\117\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\1\7\1\165\6\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\6\7\1\165\3\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\4\0\4\7\1\0\4\7"+
    "\1\163\3\7\12\0\2\7\1\0\1\7\5\0\4\7"+
    "\2\0\7\7\1\163\2\7\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\10\7\12\0\2\7"+
    "\1\0\1\131\5\0\4\7\2\0\12\7\1\0\6\7"+
    "\1\131\12\0\2\7\1\0\7\7\103\0\1\166\20\0"+
    "\4\7\1\0\10\7\12\0\2\7\1\0\1\167\5\0"+
    "\4\7\2\0\12\7\1\0\6\7\1\167\12\0\2\7"+
    "\1\0\7\7\4\0\3\7\1\170\1\0\3\7\1\170"+
    "\4\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\12\7\1\0\7\7\12\0\2\7\1\0\7\7\3\0"+
    "\17\171\4\0\75\171\17\72\2\0\40\72\1\0\34\72"+
    "\1\0\20\72\1\0\1\21\1\72\1\73\36\72\1\0"+
    "\34\72\1\0\1\73\6\0\1\172\1\173\20\0\1\174"+
    "\30\0\1\175\36\0\73\76\2\0\23\76\2\0\1\101"+
    "\1\0\1\101\1\0\10\101\10\0\1\101\1\0\2\101"+
    "\1\0\1\101\5\0\4\101\2\0\12\101\1\0\7\101"+
    "\12\0\12\101\4\0\1\176\3\0\1\177\20\0\1\177"+
    "\72\0\1\200\117\0\4\7\1\0\7\7\1\201\12\0"+
    "\2\7\1\0\1\7\5\0\4\7\2\0\11\7\1\201"+
    "\1\0\7\7\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\2\7\1\202\5\7\12\0\2\7\1\0\1\7"+
    "\5\0\1\7\1\202\2\7\2\0\1\7\1\203\10\7"+
    "\1\0\7\7\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\1\7\1\204\6\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\12\7\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\2\7\1\202\5\7"+
    "\12\0\2\7\1\0\1\7\5\0\1\7\1\202\2\7"+
    "\2\0\12\7\1\0\7\7\12\0\2\7\1\0\7\7"+
    "\4\0\4\7\1\0\1\205\7\7\12\0\2\7\1\0"+
    "\1\7\5\0\4\7\2\0\12\7\1\0\7\7\12\0"+
    "\2\7\1\0\7\7\4\0\4\7\1\0\6\7\1\206"+
    "\1\7\12\0\2\7\1\0\1\7\5\0\2\7\1\206"+
    "\1\7\2\0\12\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\1\7\1\207\6\7\12\0"+
    "\2\7\1\0\1\7\5\0\4\7\2\0\6\7\1\210"+
    "\3\7\1\0\7\7\12\0\2\7\1\0\7\7\4\0"+
    "\4\7\1\0\10\7\12\0\1\211\1\7\1\0\1\7"+
    "\5\0\4\7\2\0\12\7\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\1\7\1\210\6\7"+
    "\12\0\2\7\1\0\1\7\5\0\4\7\2\0\6\7"+
    "\1\210\3\7\1\0\7\7\12\0\2\7\1\0\7\7"+
    "\4\0\4\7\1\0\10\7\12\0\1\7\1\212\1\0"+
    "\1\7\5\0\4\7\2\0\12\7\1\0\7\7\12\0"+
    "\2\7\1\0\7\7\4\0\4\7\1\0\3\7\1\213"+
    "\4\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\12\7\1\0\7\7\12\0\2\7\1\0\7\7\3\0"+
    "\17\122\4\0\75\122\23\123\1\214\74\123\1\0\4\7"+
    "\1\0\6\7\1\215\1\7\12\0\2\7\1\0\1\7"+
    "\5\0\2\7\1\215\1\7\2\0\12\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\4\0\4\7\1\0\10\7"+
    "\12\0\2\7\1\0\1\7\5\0\4\7\2\0\1\216"+
    "\11\7\1\0\7\7\12\0\2\7\1\0\7\7\4\0"+
    "\4\7\1\0\1\217\7\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\12\7\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\6\7\1\220\1\7"+
    "\12\0\2\7\1\0\1\7\5\0\4\7\2\0\12\7"+
    "\1\0\7\7\12\0\2\7\1\0\7\7\13\0\1\221"+
    "\42\0\1\222\74\0\1\223\175\0\1\224\22\0\1\225"+
    "\1\0\1\226\157\0\1\227\110\0\1\230\64\0\1\225"+
    "\115\0\1\231\143\0\1\232\75\0\1\233\123\0\1\234"+
    "\155\0\1\222\154\0\1\235\22\0\1\236\17\0\1\237"+
    "\65\0\4\7\1\0\10\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\4\7\1\240\5\7\1\0\2\7"+
    "\1\240\4\7\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\1\241\7\7\12\0\2\7\1\0\1\7\5\0"+
    "\4\7\2\0\12\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\10\7\12\0\1\242\1\7"+
    "\1\0\1\7\5\0\4\7\2\0\12\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\4\0\3\7\1\243\1\0"+
    "\3\7\1\243\4\7\12\0\2\7\1\0\1\7\5\0"+
    "\4\7\2\0\12\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\10\7\12\0\2\7\1\0"+
    "\1\7\5\0\4\7\2\0\4\7\1\244\5\7\1\0"+
    "\2\7\1\244\4\7\12\0\2\7\1\0\7\7\4\0"+
    "\4\7\1\0\1\7\1\245\6\7\12\0\2\7\1\0"+
    "\1\7\5\0\4\7\2\0\6\7\1\245\3\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\120\0\1\246\3\0"+
    "\1\176\10\0\1\104\106\0\1\176\117\0\1\200\2\0"+
    "\1\103\4\0\1\103\1\104\66\0\1\247\17\0\3\7"+
    "\1\250\1\0\3\7\1\250\4\7\12\0\2\7\1\0"+
    "\1\7\5\0\4\7\2\0\12\7\1\0\7\7\12\0"+
    "\2\7\1\0\7\7\4\0\3\7\1\251\1\0\3\7"+
    "\1\251\4\7\12\0\2\7\1\0\1\7\5\0\4\7"+
    "\2\0\12\7\1\0\7\7\12\0\2\7\1\0\7\7"+
    "\4\0\4\7\1\0\10\7\12\0\2\7\1\0\1\252"+
    "\5\0\4\7\2\0\12\7\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\2\7\1\253\5\7"+
    "\12\0\2\7\1\0\1\7\5\0\4\7\2\0\12\7"+
    "\1\0\7\7\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\7\7\1\254\12\0\2\7\1\0\1\7\5\0"+
    "\4\7\2\0\11\7\1\254\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\3\7\1\255\4\7"+
    "\12\0\2\7\1\0\1\7\5\0\4\7\2\0\12\7"+
    "\1\0\7\7\12\0\2\7\1\0\7\7\4\0\4\7"+
    "\1\0\5\7\1\256\2\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\12\7\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\10\7\12\0\2\7"+
    "\1\0\1\7\5\0\3\7\1\257\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\3\0\16\123\1\5"+
    "\4\123\1\214\74\123\1\0\4\7\1\0\6\7\1\260"+
    "\1\7\12\0\2\7\1\0\1\7\5\0\2\7\1\260"+
    "\1\7\2\0\12\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\3\7\1\261\4\7\12\0"+
    "\2\7\1\0\1\7\5\0\4\7\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\17\0\1\262\215\0"+
    "\1\263\115\0\1\264\40\0\1\265\100\0\1\266\135\0"+
    "\1\267\177\0\1\270\62\0\1\271\60\0\1\272\116\0"+
    "\1\273\134\0\1\274\10\0\1\274\46\0\1\275\3\0"+
    "\1\275\16\0\1\276\113\0\1\277\141\0\1\300\67\0"+
    "\4\7\1\0\6\7\1\301\1\7\12\0\2\7\1\0"+
    "\1\7\5\0\2\7\1\301\1\7\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\4\0\4\7\1\0"+
    "\10\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\2\7\1\302\7\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\1\303\7\7\12\0\2\7"+
    "\1\0\1\7\5\0\4\7\2\0\12\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\4\0\4\7\1\0\5\7"+
    "\1\304\2\7\12\0\2\7\1\0\1\7\5\0\4\7"+
    "\2\0\10\7\1\304\1\7\1\0\7\7\12\0\2\7"+
    "\1\0\7\7\4\0\4\7\1\0\10\7\12\0\1\7"+
    "\1\305\1\0\1\7\5\0\4\7\2\0\12\7\1\0"+
    "\5\7\1\305\1\7\12\0\2\7\1\0\7\7\4\0"+
    "\4\7\1\0\10\7\12\0\2\7\1\0\1\7\5\0"+
    "\4\7\2\0\12\7\1\0\1\306\6\7\12\0\2\7"+
    "\1\0\1\306\6\7\4\0\1\307\117\0\4\7\1\0"+
    "\10\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\1\310\11\7\1\0\7\7\12\0\2\7\1\0\7\7"+
    "\4\0\4\7\1\0\1\7\1\311\6\7\12\0\2\7"+
    "\1\0\1\7\5\0\4\7\2\0\12\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\4\0\3\7\1\312\1\0"+
    "\3\7\1\312\4\7\12\0\2\7\1\0\1\7\5\0"+
    "\4\7\2\0\12\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\5\7\1\313\2\7\12\0"+
    "\2\7\1\0\1\7\5\0\4\7\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\4\0\4\7\1\0"+
    "\6\7\1\314\1\7\12\0\2\7\1\0\1\7\5\0"+
    "\4\7\2\0\12\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\10\7\12\0\2\7\1\0"+
    "\1\7\5\0\3\7\1\315\2\0\12\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\4\0\4\7\1\0\1\316"+
    "\7\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\12\7\1\0\7\7\12\0\2\7\1\0\7\7\14\0"+
    "\1\230\160\0\1\317\60\0\1\320\112\0\1\321\223\0"+
    "\1\322\16\0\1\323\136\0\1\324\103\0\1\325\134\0"+
    "\1\326\121\0\1\327\77\0\1\330\150\0\1\331\166\0"+
    "\1\332\15\0\1\333\107\0\3\7\1\334\1\0\3\7"+
    "\1\334\4\7\12\0\2\7\1\0\1\7\5\0\4\7"+
    "\2\0\12\7\1\0\7\7\12\0\2\7\1\0\7\7"+
    "\4\0\4\7\1\0\10\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\3\7\1\335\6\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\4\0\4\7\1\0\10\7"+
    "\12\0\2\7\1\0\1\7\5\0\4\7\2\0\4\7"+
    "\1\336\5\7\1\0\7\7\12\0\2\7\1\0\7\7"+
    "\4\0\4\7\1\0\10\7\12\0\2\7\1\0\1\7"+
    "\5\0\4\7\2\0\12\7\1\0\1\7\1\337\5\7"+
    "\12\0\2\7\1\0\5\7\1\337\1\7\4\0\4\7"+
    "\1\0\10\7\12\0\2\7\1\0\1\340\5\0\4\7"+
    "\2\0\12\7\1\0\6\7\1\340\12\0\2\7\1\0"+
    "\7\7\4\0\1\307\2\0\1\341\4\0\1\341\1\104"+
    "\66\0\1\247\17\0\4\7\1\0\10\7\12\0\1\342"+
    "\1\7\1\0\1\7\5\0\4\7\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\4\0\4\7\1\0"+
    "\10\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\2\7\1\343\7\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\6\7\1\344\1\7\12\0"+
    "\2\7\1\0\1\7\5\0\4\7\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\4\0\4\7\1\0"+
    "\1\345\7\7\12\0\2\7\1\0\1\7\5\0\4\7"+
    "\2\0\12\7\1\0\7\7\12\0\2\7\1\0\7\7"+
    "\4\0\4\7\1\0\3\7\1\346\4\7\12\0\2\7"+
    "\1\0\1\7\5\0\4\7\2\0\12\7\1\0\7\7"+
    "\12\0\2\7\1\0\7\7\11\0\1\347\120\0\1\350"+
    "\154\0\1\351\44\0\1\351\36\0\1\352\75\0\1\353"+
    "\122\0\1\354\117\0\1\355\114\0\1\356\120\0\1\357"+
    "\124\0\1\360\104\0\4\7\1\0\10\7\12\0\1\361"+
    "\1\7\1\0\1\7\5\0\4\7\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\4\0\4\7\1\0"+
    "\5\7\1\362\2\7\12\0\2\7\1\0\1\7\5\0"+
    "\4\7\2\0\10\7\1\362\1\7\1\0\7\7\12\0"+
    "\2\7\1\0\7\7\4\0\1\363\3\0\1\364\20\0"+
    "\1\364\72\0\4\7\1\0\10\7\12\0\2\7\1\0"+
    "\1\7\5\0\4\7\2\0\3\7\1\365\6\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\4\0\4\7\1\0"+
    "\10\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\1\7\1\366\10\7\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\4\0\4\7\1\0\1\7\1\367\6\7\12\0"+
    "\2\7\1\0\1\7\5\0\4\7\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\47\0\1\370\44\0"+
    "\1\370\121\0\1\371\17\0\1\372\121\0\1\373\153\0"+
    "\1\374\55\0\1\375\220\0\1\376\3\0\1\376\116\0"+
    "\1\377\15\0\1\u0100\107\0\4\7\1\0\2\7\1\u0101"+
    "\5\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\12\7\1\0\7\7\12\0\2\7\1\0\7\7\4\0"+
    "\4\7\1\0\6\7\1\u0102\1\7\12\0\2\7\1\0"+
    "\1\7\5\0\2\7\1\u0102\1\7\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\4\0\1\363\10\0"+
    "\1\104\106\0\1\363\131\0\1\u0103\112\0\1\u0104\164\0"+
    "\1\u0105\52\0\1\u0106\124\0\1\u0107\115\0\1\u0108\115\0"+
    "\1\u0109\111\0\4\7\1\0\3\7\1\u010a\4\7\12\0"+
    "\2\7\1\0\1\7\5\0\4\7\2\0\12\7\1\0"+
    "\7\7\12\0\2\7\1\0\7\7\4\0\4\7\1\0"+
    "\10\7\12\0\2\7\1\0\1\7\5\0\4\7\2\0"+
    "\4\7\1\u010b\5\7\1\0\2\7\1\u010b\4\7\12\0"+
    "\2\7\1\0\7\7\11\0\1\u010c\117\0\1\u010d\144\0"+
    "\1\u010e\73\0\1\u010f\141\0\1\u0110\67\0\4\7\1\0"+
    "\7\7\1\u0111\12\0\2\7\1\0\1\7\5\0\4\7"+
    "\2\0\11\7\1\u0111\1\0\7\7\12\0\2\7\1\0"+
    "\7\7\11\0\1\u0112\122\0\1\u0113\136\0\1\u0114\202\0"+
    "\1\u0115\5\0\4\7\1\0\1\u0116\7\7\12\0\2\7"+
    "\1\0\1\7\5\0\4\7\2\0\5\7\1\u0116\4\7"+
    "\1\0\7\7\12\0\2\7\1\0\7\7\14\0\1\u0117"+
    "\115\0\1\u0118\121\0\1\u0119\115\0\1\u011a\140\0\1\u011b"+
    "\120\0\1\u011c\116\0\1\u011d\67\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\11\1\3\11\1\1\1\11"+
    "\13\1\1\11\5\1\1\11\3\1\7\11\1\1\2\11"+
    "\2\1\1\11\3\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\0\1\11\1\0\1\1\1\11\13\1\1\0\1\11"+
    "\5\1\1\11\1\1\6\11\16\0\6\1\1\11\2\1"+
    "\1\0\4\11\1\1\1\0\14\1\1\0\4\1\7\0"+
    "\1\11\7\0\6\1\1\11\1\0\12\1\3\0\1\11"+
    "\13\0\6\1\1\0\7\1\3\0\1\11\6\0\2\11"+
    "\1\0\5\1\1\0\5\1\4\0\1\11\5\0\2\1"+
    "\2\0\3\1\1\0\1\11\3\0\1\11\3\0\2\1"+
    "\3\0\1\11\2\0\1\11\2\1\4\0\1\11\1\1"+
    "\2\0\1\11\1\0\1\1\4\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public int getLine() { return yyline+1; }
public int getColumn() { return yycolumn; }
	StringBuffer string = new StringBuffer();
	int countCloseBrace = 0;
	
	protected StringBuffer m_String = new StringBuffer();
	protected ComplexSymbolFactory factory;
	
	
	public MyLexer(java.io.Reader in, ComplexSymbolFactory sf){
		this(in);
		factory = sf;
    }
	 
	void setSymbolFactory(ComplexSymbolFactory sf) {
		factory = sf;
	}
	
	private Symbol symbol(String name, int sym, Object val,int buflength) {
	      Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
	      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
	      return factory.newSymbol(name, sym, left, right,val);
	  }
	  
	  
	public Symbol symbol(String plainname, int terminalcode, String lexem){
		return factory.newSymbol(plainname, terminalcode, new Location(yyline+1, yycolumn +1), 
				new Location(yyline+1,yycolumn+yylength()), lexem);
	}

	public Symbol symbol(String plainname, int terminalcode){
		return factory.newSymbol(plainname, terminalcode, new Location(yyline+1, yycolumn +1), 
				new Location(yyline+1,yycolumn+yylength()));
	}
	
	private Symbol symbol(String name, int sym, Object val) {
	      Location left = new Location(yyline+1,yycolumn+1,yychar);
	      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
	      return factory.newSymbol(name, sym, left, right,val);
	  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return factory.newSymbol("EOF",sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 93: break;
          case 2: 
            { return symbol("INT"	, sym.INT,yytext());
            }
          case 94: break;
          case 3: 
            { return symbol("ID"		, sym.IDENT,yytext());
            }
          case 95: break;
          case 4: 
            { return symbol("UNDER"		, sym.UNDER);
            }
          case 96: break;
          case 5: 
            { return symbol("MINUS"		, sym.MINUS, JSOperatorKind.MINUS);
            }
          case 97: break;
          case 6: 
            { return symbol("DIV"		, sym.DIV, 	 JSOperatorKind.DIV);
            }
          case 98: break;
          case 7: 
            { return symbol("MULT"		, sym.MULT,  JSOperatorKind.MULT);
            }
          case 99: break;
          case 8: 
            { return symbol("INTERROGATION", sym.INTERROGATION);
            }
          case 100: break;
          case 9: 
            { return symbol("XOR"		, sym.XOR,  JSOperatorKind.XOR);
            }
          case 101: break;
          case 10: 
            { return symbol("PLUS"		, sym.PLUS,  JSOperatorKind.PLUS);
            }
          case 102: break;
          case 11: 
            { return symbol("MOD"		, sym.MOD, 	 JSOperatorKind.MOD);
            }
          case 103: break;
          case 12: 
            { return symbol("AMPERSAND"	, sym.AMPERSAND);
            }
          case 104: break;
          case 13: 
            { return symbol("PIPE"		, sym.PIPE);
            }
          case 105: break;
          case 14: 
            { return symbol("LT"			, sym.LT);
            }
          case 106: break;
          case 15: 
            { return symbol("AFFECT"		, sym.AFFECT);
            }
          case 107: break;
          case 16: 
            { return symbol("GT"			, sym.GT);
            }
          case 108: break;
          case 17: 
            { return symbol("NOT"		, sym.NOT);
            }
          case 109: break;
          case 18: 
            { return symbol("ALPHA"		, sym.ALPHA);
            }
          case 110: break;
          case 19: 
            { return symbol("DOLLAR"		, sym.DOLLAR);
            }
          case 111: break;
          case 20: 
            { yybegin(STRING);
            }
          case 112: break;
          case 21: 
            { return symbol("LPAR"		, sym.LPAR);
            }
          case 113: break;
          case 22: 
            { return symbol("RPAR"		, sym.RPAR);
            }
          case 114: break;
          case 23: 
            { return symbol("LBRACE"		, sym.LBRACE);
            }
          case 115: break;
          case 24: 
            { return symbol("RBRACE"		, sym.RBRACE);
            }
          case 116: break;
          case 25: 
            { return symbol("LBRACKET"	, sym.LBRACKET);
            }
          case 117: break;
          case 26: 
            { return symbol("RBRACKET"	, sym.RBRACKET);
            }
          case 118: break;
          case 27: 
            { return symbol("END_INSTR" 	, sym.SEMICOLON);
            }
          case 119: break;
          case 28: 
            { return symbol("COLON" 		, sym.COLON);
            }
          case 120: break;
          case 29: 
            { return symbol("DOT"		, sym.DOT);
            }
          case 121: break;
          case 30: 
            { return symbol("COMMA"		, sym.COMMA);
            }
          case 122: break;
          case 31: 
            { return symbol(" # "   		, sym.SHARP);
            }
          case 123: break;
          case 32: 
            { string.append( yytext() );
            }
          case 124: break;
          case 33: 
            { yybegin(YYINITIAL); String res = string.toString(); string = new StringBuffer();
	  return symbol("StringConst",sym.STRING,res,res.length());
            }
          case 125: break;
          case 34: 
            { string.append('\\');
            }
          case 126: break;
          case 35: 
            { countCloseBrace++; string.append(yytext());
            }
          case 127: break;
          case 36: 
            { countCloseBrace--;
			if(countCloseBrace == 0) {
				yybegin(YYINITIAL);
				String res = string.toString();
				string = new StringBuffer();
	  			return symbol("PLAINCODE",sym.PLAINCODE,res,res.length()); 
	  		}
	  		else {
	  			string.append(yytext()); 
	  		}
            }
          case 128: break;
          case 37: 
            { return symbol("LANGDEF"	, sym.LANGDEF, yytext());
            }
          case 129: break;
          case 38: 
            { yybegin(LANGCODE); countCloseBrace = 1;
            }
          case 130: break;
          case 39: 
            { return symbol("FLOAT"	, sym.FLOAT,yytext());
            }
          case 131: break;
          case 40: 
            { return symbol("DEC"		, sym.DEC, 	 JSOperatorKind.DEC);
            }
          case 132: break;
          case 41: 
            { return symbol("INC"		, sym.INC, 	 JSOperatorKind.INC);
            }
          case 133: break;
          case 42: 
            { return symbol("DO"			, sym.DO);
            }
          case 134: break;
          case 43: 
            { return symbol("AND"		, sym.AND, 	 JSOperatorKind.AND);
            }
          case 135: break;
          case 44: 
            { return symbol("OR"			, sym.OR, 	 JSOperatorKind.OR);
            }
          case 136: break;
          case 45: 
            { return symbol("LE"			, sym.COMP , JSOperatorKind.LE);
            }
          case 137: break;
          case 46: 
            { return symbol("EQ"			, sym.COMP , JSOperatorKind.EQUAL);
            }
          case 138: break;
          case 47: 
            { return symbol("ARROW"		, sym.ASSIGN);
            }
          case 139: break;
          case 48: 
            { return symbol("GE"			, sym.COMP , JSOperatorKind.GE);
            }
          case 140: break;
          case 49: 
            { return symbol("DIFF"		, sym.COMP , JSOperatorKind.DIFF);
            }
          case 141: break;
          case 50: 
            { return symbol("IF"			, sym.IF);
            }
          case 142: break;
          case 51: 
            { return symbol("IN"			, sym.IN);
            }
          case 143: break;
          case 52: 
            { return symbol("STATICOP" 	, sym.STATICOP);
            }
          case 144: break;
          case 53: 
            { string.append("\\t");
            }
          case 145: break;
          case 54: 
            { string.append("\\r");
            }
          case 146: break;
          case 55: 
            { string.append("\\n");
            }
          case 147: break;
          case 56: 
            { string.append("\\\"");
            }
          case 148: break;
          case 57: 
            { return symbol("DOUBLE"	, sym.DOUBLE,yytext());
            }
          case 149: break;
          case 58: 
            { return symbol("TRY"		, sym.TRY);
            }
          case 150: break;
          case 59: 
            { return symbol("FOR"		, sym.FOR);
            }
          case 151: break;
          case 60: 
            { return symbol("NEW"		, sym.NEW);
            }
          case 152: break;
          case 61: 
            { return symbol(" RULE "		, sym.RULE);
            }
          case 153: break;
          case 62: 
            { return symbol(" Char:"+yytext(), sym.CHAR,yytext().substring(1,yytext().length()-1));
            }
          case 154: break;
          case 63: 
            { return symbol("ELSE"		, sym.ELSE);
            }
          case 155: break;
          case 64: 
            { return symbol("TRUE"	, sym.TRUE);
            }
          case 156: break;
          case 65: 
            { return symbol("STEP"		, sym.STEP);
            }
          case 157: break;
          case 66: 
            { return symbol("NULL", sym.NULL);
            }
          case 158: break;
          case 67: 
            { return symbol(" EBD " 		, sym.EBD);
            }
          case 159: break;
          case 68: 
            { return symbol(" VOID "	, sym.VOID);
            }
          case 160: break;
          case 69: 
            { return symbol("THROW"	    , sym.THROW);
            }
          case 161: break;
          case 70: 
            { return symbol("FALSE"	, sym.FALSE);
            }
          case 162: break;
          case 71: 
            { yybegin(LANGHEADER); 	return symbol("LANG", sym.LANG);
            }
          case 163: break;
          case 72: 
            { return symbol(" GMAP "		, sym.GMAP);
            }
          case 164: break;
          case 73: 
            { return symbol(" MARK "			, sym.MARK);
            }
          case 165: break;
          case 74: 
            { return symbol("WHILE"		, sym.WHILE);
            }
          case 166: break;
          case 75: 
            { return symbol("CATCH"		, sym.CATCH);
            }
          case 167: break;
          case 76: 
            { return symbol("BREAK"		, sym.BREAK);
            }
          case 168: break;
          case 77: 
            { return symbol("RETURN"		, sym.RETURN);
            }
          case 169: break;
          case 78: 
            { return symbol("DELETE"		, sym.DELETE);
            }
          case 170: break;
          case 79: 
            { return symbol(" PRINT "	, sym.PRINT);
            }
          case 171: break;
          case 80: 
            { return symbol("FOREACH"	, sym.FOREACH);
            }
          case 172: break;
          case 81: 
            { return symbol("FINALLY"	, sym.FINALLY);
            }
          case 173: break;
          case 82: 
            { return symbol(" UNMARK "		, sym.UNMARK);
            }
          case 174: break;
          case 83: 
            { yybegin(LANGHEADER); 	return symbol("HEADER", sym.HEADER);
            }
          case 175: break;
          case 84: 
            { return symbol(" COLLECT "	, sym.COLLECT);
            }
          case 176: break;
          case 85: 
            { return symbol(" MODELER "	, sym.MODELER);
            }
          case 177: break;
          case 86: 
            { return symbol("CONTINUE"	, sym.CONTINUE);
            }
          case 178: break;
          case 87: 
            { return symbol(" ISMARKED "		, sym.ISMARKED);
            }
          case 179: break;
          case 88: 
            { return symbol(" DIMENSION ", sym.DIMENSION);
            }
          case 180: break;
          case 89: 
            { return symbol(" LIST "	, sym.LIST);
            }
          case 181: break;
          case 90: 
            { return symbol(" LEFTPATTERN ", sym.LEFTPATTERN);
            }
          case 182: break;
          case 91: 
            { return symbol(" ISNOTMARKED "	, sym.ISNOTMARKED);
            }
          case 183: break;
          case 92: 
            { return symbol(" RIGHTPATTERN ", sym.RIGHTPATTERN);
            }
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
